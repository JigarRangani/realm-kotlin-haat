name: PR Build
on:
  pull_request:
    paths-ignore:
    - '**.md'
env:
  REALM_DISABLE_ANALYTICS: true
jobs:
  # TODO Should be working, disable while iterating on further steps to increase turn-around time. 
  # static-analysis:
  #   uses: ./.github/workflows/include-static-analysis.yml
   
  check-cache:
    uses: ./.github/workflows/include-check-cache.yml

  build-android-packages:
    runs-on: ubuntu-latest
    needs: check-cache
    # needs: static-analysis
    if: needs.check-cache.outputs.packages-android-cache-hit != 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: "recursive"

      # TODO I'm not sure this catches changes to our Config.kt, what is the impact?
      #  https://github.com/actions/setup-java#caching-packages-dependencies
      - name: Setup Java 11
        uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: 11

      # TODO Default behavior is only caching from main/master. Unclear what the best caching strategy is for us.
      # TODO What is the rules and limits for caching on Github -> 10 GB limit, automatic evicition
      - name: Setup Gradle and task/dependency caching
        uses: gradle/gradle-build-action@v2
        with:
          cache-read-only: false

      # TODO This cmake version is not being used by the Android builds. Figure out why. 
      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1.12
        with:
          cmake-version: '3.22.1'

      # TODO This Ninja version is not being used by the Android builds. Figure out why. 
      - name: Setup ninja
        uses: ashutoshvarma/setup-ninja@master
        with:
          version: '1.11.0'
 
      # TODO This might not work on Windows: https://github.com/hendrikmuhs/ccache-action#notes-on-windows-support
      - name: Install ccache
        uses: hendrikmuhs/ccache-action@v1.2.2
        with:
          key: ${{ github.job }}-${{ matrix.os }}
          max-size: '2.0G'

      - name: Prepend ccache executables to the PATH
        run: echo "/usr/lib/ccache:/usr/local/opt/ccache/libexec" >> $GITHUB_PATH

      # TODO See https://github.com/hendrikmuhs/ccache-action/issues/94
      - name: Configure ccache
        run: |
          ccache --set-config="compiler_check=content"
          ccache --show-config

      # TODO This matches 23.2.8568313, but what happens if we a define specific ndk version in our build? 
      - name: Setup NDK
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r23c

      - name: Debug environment
        run: |
          env
          type cmake
          cmake --version
          type ninja
          ninja --version

      - name: Build packages
        working-directory: packages
        run: ./gradlew publishCIPackages -Prealm.kotlin.targets=android --info

      # TODO Figure out naming schema and retention policy
      # We cannot use artifacts as they cannot be shared between workflows, so use cache instead.
      - name: Store build cache
        uses: actions/cache@v3
        with:
          path: ./packages/build/m2-buildrepo
          key: packages-m2-android-sync-${{ needs.check-cache.outputs.packages-sha }}

      # TODO Must match naming found in include-check-cache.yml
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: packages-android-${{ needs.check-cache.outputs.version-label }}
          path: ./packages/build/m2-buildrepo/**/* 
          retention-days: 1

  build-macos-x64-packages:
    runs-on: macos-latest
    needs: check-cache
    # needs: static-analysis
    if: needs.check-cache.outputs.packages-macos-x64-cache-hit != 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: "recursive"

      # TODO I'm not sure this catches changes to our Config.kt, what is the impact?
      #  https://github.com/actions/setup-java#caching-packages-dependencies
      - name: Setup Java 11
        uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: 11

      # TODO Default behavior is only caching from main/master. Unclear what the best caching strategy is for us.
      # TODO What is the rules and limits for caching on Github -> 10 GB limit, automatic evicition
      - name: Setup Gradle and task/dependency caching
        uses: gradle/gradle-build-action@v2
        with:
          cache-read-only: false

      # TODO This cmake version is not being used by the Android builds. Figure out why. 
      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1.12
        with:
          cmake-version: '3.22.1'

      # TODO This Ninja version is not being used by the Android builds. Figure out why. 
      - name: Setup ninja
        uses: ashutoshvarma/setup-ninja@master
        with:
          version: '1.11.0'
 
      # TODO This might not work on Windows: https://github.com/hendrikmuhs/ccache-action#notes-on-windows-support
      - name: Install ccache
        uses: hendrikmuhs/ccache-action@v1.2.2
        with:
          key: ${{ github.job }}-${{ matrix.os }}
          max-size: '2.0G'

      - name: Prepend ccache executables to the PATH
        run: echo "/usr/lib/ccache:/usr/local/opt/ccache/libexec" >> $GITHUB_PATH

      # TODO See https://github.com/hendrikmuhs/ccache-action/issues/94
      - name: Configure ccache
        run: |
          ccache --set-config="compiler_check=content"
          ccache --show-config

      - name: Build packages
        working-directory: packages
        run: ./gradlew publishCIPackages -Prealm.kotlin.targets=macos --info

      # TODO Figure out naming schema and retention policy
      # We cannot use artifacts as they cannot be shared between workflows, so use cache instead.
      - name: Store build cache
        uses: actions/cache@v3
        with:
          path: ./packages/build/m2-buildrepo
          key: packages-m2-macos-x64-sync-${{ needs.check-cache.outputs.packages-sha }}

      # TODO Must match naming found in include-check-cache.yml
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: packages-macos-x64-${{ needs.check-cache.outputs.version-label }}
          path: ./packages/build/m2-buildrepo/**/* 
          retention-days: 1


  # TODO This fails with e: java.nio.file.NoSuchFileException: /Users/runner/work/realm-kotlin/realm-kotlin/packages/external/core/build-macos_universal/src/realm/object-store/c_api/Release/librealm-ffi-static.a
  build-macos-arm64-packages:
    runs-on: macos-latest
    needs: check-cache
    # needs: static-analysis
    if: needs.check-cache.outputs.packages-macos-arm64-cache-hit != 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: "recursive"

      # TODO I'm not sure this catches changes to our Config.kt, what is the impact?
      #  https://github.com/actions/setup-java#caching-packages-dependencies
      - name: Setup Java 11
        uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: 11

      # TODO Default behavior is only caching from main/master. Unclear what the best caching strategy is for us.
      # TODO What is the rules and limits for caching on Github -> 10 GB limit, automatic evicition
      - name: Setup Gradle and task/dependency caching
        uses: gradle/gradle-build-action@v2
        with:
          cache-read-only: false

      # TODO This cmake version is not being used by the Android builds. Figure out why. 
      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1.12
        with:
          cmake-version: '3.22.1'

      # TODO This Ninja version is not being used by the Android builds. Figure out why. 
      - name: Setup ninja
        uses: ashutoshvarma/setup-ninja@master
        with:
          version: '1.11.0'
 
      # TODO This might not work on Windows: https://github.com/hendrikmuhs/ccache-action#notes-on-windows-support
      - name: Install ccache
        uses: hendrikmuhs/ccache-action@v1.2.2
        with:
          key: ${{ github.job }}-${{ matrix.os }}
          max-size: '2.0G'

      - name: Prepend ccache executables to the PATH
        run: echo "/usr/lib/ccache:/usr/local/opt/ccache/libexec" >> $GITHUB_PATH

      # TODO See https://github.com/hendrikmuhs/ccache-action/issues/94
      - name: Configure ccache
        run: |
          ccache --set-config="compiler_check=content"
          ccache --show-config

      - name: Build packages
        working-directory: packages
        run: ./gradlew publishCIPackages -Prealm.kotlin.targets=macosArm64 --info

      # TODO Figure out naming schema and retention policy
      # We cannot use artifacts as they cannot be shared between workflows, so use cache instead.
      - name: Store build cache
        uses: actions/cache@v3
        with:
          path: ./packages/build/m2-buildrepo
          key: packages-m2-macos-arm64-sync-${{ needs.check-cache.outputs.packages-sha }}

      # TODO Must match naming found in include-check-cache.yml
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: packages-macos-arm64-${{ needs.check-cache.outputs.version-label }}
          path: ./packages/build/m2-buildrepo/**/* 
          retention-days: 1


  # TODO Require JVM packages
  build-benchmarks:
    runs-on: ubuntu-latest
    needs: [check-cache, build-android-packages]
    if: false
    # if: |
    #   always() &&
    #   (needs.build-packages.result == 'success' || needs.build-packages.result == 'skipped')
    
    steps:
      - uses: actions/checkout@v3

      - name: Restore m2-buildrepo
        uses: actions/cache@v3
        with:
          path: ./packages/build/m2-buildrepo
          key: packages-m2-${{ runner.os }}-sync-${{ needs.check-cache.outputs.packages-sha }}

      - name: Build benchmarks
        working-directory: benchmarks
        run: ./gradlew assemble

  # TODO Split into base and sync tests
  # TODO If we hook up to Device Farm we can use ubuntu runners instead
  # TODO Compare speed between emulator and Device Farm
  # TODO We should be able to move this into a reusable work-flow
  test-android-packages:
    runs-on: macos-latest
    needs: [check-cache, build-android-packages]
    if: |
      always() &&
      (needs.build-android-packages.result == 'success' || needs.build-android-packages.result == 'skipped')

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Java 11
        uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: 11

      - name: Setup Gradle and task/dependency caching
        uses: gradle/gradle-build-action@v2
        with:
          cache-read-only: false

      - name: Restore m2-buildrepo
        uses: actions/cache@v3
        with:
          key: packages-android-${{ needs.check-cache.outputs.version-label }}
          path: ./packages/build/m2-buildrepo 

      # TODO Can we read api level from Config.kt
      - name: Run Integration Tests
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 33
          target: google_apis # default is not available on 33 yet.
          arch: x86_64
          profile: Nexus 6
          script: cd test && ./gradlew :base:connectedAndroidTest


      - name: Publish Unit Test Results
        uses: dorny/test-reporter@v1
        if: always() || failure()
        with:
          name: Results - Android Base (Emulator)
          path: ./test/base/build/**/TEST-*.xml
          reporter: java-junit
          list-suites: failed
          list-tests: failed
          # path-replace-backslashes: true
          fail-on-error: true

  test-android-packages-device-farm:        
    runs-on: macos-latest
    needs: [check-cache, build-android-packages]
    if: |
      always() &&
      (needs.build-android-packages.result == 'success' || needs.build-android-packages.result == 'skipped')

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Java 11
        uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: 11

      - name: Setup Gradle and task/dependency caching
        uses: gradle/gradle-build-action@v2
        with:
          cache-read-only: false
      
      - name: Build test APK
        run: echo "Do stuff"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_DEVICEFARM_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_DEVICEFARM_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      # io.realm.testapp and io.realm.sync.testapp
      # - name: Run the tests
      #   uses: realm/aws-devicefarm/test-application@d94e739490340474f8464f74289a0f48706dd3a3
      #   id: run_tests
      #   with:
      #     project_arn: ${{ secrets.DEVICEFARM_PROJECT_ARN }}
      #     device_pool_arn: ${{ secrets.DEVICEFARM_ANDROID_POOL_ARN }}
      #     app_file: ${{ github.workspace }}/test/build/intermediates/apk/androidTest/debug/base-debug-androidTest.apk
      #     app_type: ANDROID_APP
      #     test_type: APPIUM_PYTHON
      #     test_package_file: https://github.com/realm/aws-devicefarm-sample-data/releases/download/0.3/sample_env_python3.zip
      #     test_package_type: APPIUM_PYTHON_TEST_PACKAGE
      #     test_spec_file: test_spec.yaml
      #     test_spec_type: APPIUM_PYTHON_TEST_SPEC
      #     remote_src: true
      #     test_spec: |
      #       version: 0.1
      #       phases:
      #         install:
      #           commands:
      #             - export PYTHON_VERSION=3
      #         pre_test:
      #           commands:
      #             - adb -s $DEVICEFARM_DEVICE_UDID shell pm grant io.realm.testapp android.permission.READ_EXTERNAL_STORAGE
      #             - adb -s $DEVICEFARM_DEVICE_UDID shell pm grant io.realm.testapp android.permission.WRITE_EXTERNAL_STORAGE
      #         test:
      #           commands:
      #             - echo " --baasurl=${{ secrets.BaseUrl }} --baascluster=${{ inputs.clusterName }} --baasapikey=${{ secrets.AtlasPublicKey}} --baasprivateapikey=${{ secrets.AtlasPrivateKey}} --baasprojectid=${{ secrets.AtlasProjectId }} --baasdifferentiator=xamarinandroid" > testargs.txt
      #             - adb -s $DEVICEFARM_DEVICE_UDID push testargs.txt /storage/emulated/0/RealmTests/testargs.txt
      #             - adb -s $DEVICEFARM_DEVICE_UDID shell am instrument -w -r io.realm.xamarintests/.TestRunner
      #         post_test:
      #           commands:
      #             - adb -s $DEVICEFARM_DEVICE_UDID pull /storage/emulated/0/RealmTests/TestResults.Android.xml $DEVICEFARM_LOG_DIR/TestResults.Android.xml
      #       artifacts:
      #         - $DEVICEFARM_LOG_DIR
      #     file_artifacts: |
      #       Customer Artifacts.zip

      # - name: Fetch test artifacts
      #   run: |
      #     Expand-Archive 'Customer Artifacts.zip' -DestinationPath artifacts
      #     Import-Module AWSPowerShell
      #     $jobs = Get-DFJobList -Arn ${{ steps.run_tests.outputs.arn }}
      #     $suites = Get-DFSuiteList -Arn $jobs[0].Arn
      #     $artifacts = Get-DFArtifactList -Arn $suites[1].Arn -Type File | Where-Object { $_.Name -EQ "Logcat" }
      #     echo "::group::Logcat"
      #     Invoke-WebRequest -Uri $artifacts[0].Url | Select-Object -Expand RawContent
      #     echo "::endgroup::"

      # - name: Device Farm Raw JSON Output
      #   run: |
      #     echo "::group::Data"
      #     echo (ConvertFrom-Json '${{ steps.run_tests.outputs.data }}' | ConvertTo-Json)
      #     echo "::endgroup::"
      #   if: always()

      # - name: Publish Unit Test Results
      #   uses: dorny/test-reporter@v1
      #   if: always() || failure()
      #   with:
      #     name: Results - Android Base (Device Farm)
      #     path: ./test/base/build/**/TEST-*.xml
      #     reporter: java-junit
      #     list-suites: failed
      #     list-tests: failed
      #     # path-replace-backslashes: true
      #     fail-on-error: true


  test-macos-packages:
    runs-on: macos-latest
    needs: [check-cache, build-macos-x64-packages] # TODO Do we need to wait for all matrix builds?
    if: |
      always() &&
      (needs.build-packages.result == 'success' || needs.build-packages.result == 'skipped')

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: "recursive"

      - name: Restore m2-buildrepo
        uses: actions/cache@v3
        with:
          path: ./packages/build/m2-buildrepo
          key: packages-m2-macos-sync-${{ needs.check-cache.outputs.packages-sha }}

      - name: Run tests
        run: echo "Run tests for ${{ needs.check-cache.outputs.packages-sha }}"



