name: PR Build
on:
  pull_request:
    paths-ignore:
    - '**.md'
env:
  REALM_DISABLE_ANALYTICS: true
jobs:
  # TODO Should be working, disable while iterating on further steps to increase turn-around time. 
  # static-analysis:
  #   uses: ./.github/workflows/include-static-analysis.yml
   
  check-cache:
    uses: ./.github/workflows/include-check-cache.yml

  build-android-packages:
    runs-on: ubuntu-latest
    needs: check-cache
    # needs: static-analysis
    if: needs.check-cache.outputs.packages-android-cache-hit != 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: "recursive"

      # TODO I'm not sure this catches changes to our Config.kt, what is the impact?
      #  https://github.com/actions/setup-java#caching-packages-dependencies
      - name: Setup Java 11
        uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: 11

      # TODO Default behavior is only caching from main/master. Unclear what the best caching strategy is for us.
      # TODO What is the rules and limits for caching on Github -> 10 GB limit, automatic evicition
      - name: Setup Gradle and task/dependency caching
        uses: gradle/gradle-build-action@v2
        with:
          cache-read-only: false

      # TODO This cmake version is not being used by the Android builds. Figure out why. 
      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1.12
        with:
          cmake-version: '3.22.1'

      # TODO This Ninja version is not being used by the Android builds. Figure out why. 
      - name: Setup ninja
        uses: ashutoshvarma/setup-ninja@master
        with:
          version: '1.11.0'
 
      # TODO This might not work on Windows: https://github.com/hendrikmuhs/ccache-action#notes-on-windows-support
      - name: Install ccache
        uses: hendrikmuhs/ccache-action@v1.2.2
        with:
          key: ${{ github.job }}-${{ matrix.os }}
          max-size: '2.0G'

      - name: Prepend ccache executables to the PATH
        run: echo "/usr/lib/ccache:/usr/local/opt/ccache/libexec" >> $GITHUB_PATH

      # TODO See https://github.com/hendrikmuhs/ccache-action/issues/94
      - name: Configure ccache
        run: |
          ccache --set-config="compiler_check=content"
          ccache --show-config

      # TODO This matches 23.2.8568313, but what happens if we a define specific ndk version in our build? 
      - name: Setup NDK
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r23c

      - name: Debug environment
        run: |
          env
          type cmake
          cmake --version
          type ninja
          ninja --version

      - name: Build packages
        working-directory: packages
        run: ./gradlew publishCIPackages -Prealm.kotlin.targets=android --info

      # TODO Figure out naming schema and retention policy
      # We cannot use artifacts as they cannot be shared between workflows, so use cache instead.
      - name: Store build artifacts
        uses: actions/cache@v3
        with:
          path: ./packages/build/m2-buildrepo
          key: packages-m2-android-sync-${{ needs.check-cache.outputs.packages-sha }}

  build-macos-x64-packages:
    runs-on: macos-latest
    needs: check-cache
    # needs: static-analysis
    if: ${{ needs.check-cache.outputs.packages-macos-x64-cache-hit }} == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: "recursive"

      # TODO I'm not sure this catches changes to our Config.kt, what is the impact?
      #  https://github.com/actions/setup-java#caching-packages-dependencies
      - name: Setup Java 11
        uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: 11

      # TODO Default behavior is only caching from main/master. Unclear what the best caching strategy is for us.
      # TODO What is the rules and limits for caching on Github -> 10 GB limit, automatic evicition
      - name: Setup Gradle and task/dependency caching
        uses: gradle/gradle-build-action@v2
        with:
          cache-read-only: false

      # TODO This cmake version is not being used by the Android builds. Figure out why. 
      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1.12
        with:
          cmake-version: '3.22.1'

      # TODO This Ninja version is not being used by the Android builds. Figure out why. 
      - name: Setup ninja
        uses: ashutoshvarma/setup-ninja@master
        with:
          version: '1.11.0'
 
      # TODO This might not work on Windows: https://github.com/hendrikmuhs/ccache-action#notes-on-windows-support
      - name: Install ccache
        uses: hendrikmuhs/ccache-action@v1.2.2
        with:
          key: ${{ github.job }}-${{ matrix.os }}
          max-size: '2.0G'

      - name: Prepend ccache executables to the PATH
        run: echo "/usr/lib/ccache:/usr/local/opt/ccache/libexec" >> $GITHUB_PATH

      # TODO See https://github.com/hendrikmuhs/ccache-action/issues/94
      - name: Configure ccache
        run: |
          ccache --set-config="compiler_check=content"
          ccache --show-config

      - name: Build packages
        working-directory: packages
        run: ./gradlew publishCIPackages -Prealm.kotlin.targets=macos --info

      # TODO Figure out naming schema and retention policy
      # We cannot use artifacts as they cannot be shared between workflows, so use cache instead.
      - name: Store build artifacts
        uses: actions/cache@v3
        with:
          path: ./packages/build/m2-buildrepo
          key: packages-m2-macos-x64-sync-${{ needs.check-cache.outputs.packages-sha }}

  build-macos-arm64-packages:
    runs-on: macos-arm # Realm custom M1 runner
    needs: check-cache
    # needs: static-analysis
    if: ${{ needs.check-cache.outputs.packages-macos-arm64-cache-hit }} == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: "recursive"

      # TODO I'm not sure this catches changes to our Config.kt, what is the impact?
      #  https://github.com/actions/setup-java#caching-packages-dependencies
      - name: Setup Java 11
        uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: 11

      # TODO Default behavior is only caching from main/master. Unclear what the best caching strategy is for us.
      # TODO What is the rules and limits for caching on Github -> 10 GB limit, automatic evicition
      - name: Setup Gradle and task/dependency caching
        uses: gradle/gradle-build-action@v2
        with:
          cache-read-only: false

      # TODO This cmake version is not being used by the Android builds. Figure out why. 
      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1.12
        with:
          cmake-version: '3.22.1'

      # TODO This Ninja version is not being used by the Android builds. Figure out why. 
      - name: Setup ninja
        uses: ashutoshvarma/setup-ninja@master
        with:
          version: '1.11.0'
 
      # TODO This might not work on Windows: https://github.com/hendrikmuhs/ccache-action#notes-on-windows-support
      - name: Install ccache
        uses: hendrikmuhs/ccache-action@v1.2.2
        with:
          key: ${{ github.job }}-${{ matrix.os }}
          max-size: '2.0G'

      - name: Prepend ccache executables to the PATH
        run: echo "/usr/lib/ccache:/usr/local/opt/ccache/libexec" >> $GITHUB_PATH

      # TODO See https://github.com/hendrikmuhs/ccache-action/issues/94
      - name: Configure ccache
        run: |
          ccache --set-config="compiler_check=content"
          ccache --show-config

      - name: Build packages
        working-directory: packages
        run: ./gradlew publishCIPackages -Prealm.kotlin.targets=macosArm64 --info

      # TODO Figure out naming schema and retention policy
      # We cannot use artifacts as they cannot be shared between workflows, so use cache instead.
      - name: Store build artifacts
        uses: actions/cache@v3
        with:
          path: ./packages/build/m2-buildrepo
          key: packages-m2-macos-arm64-sync-${{ needs.check-cache.outputs.packages-sha }}


  # TODO Require JVM packages
  build-benchmarks:
    runs-on: ubuntu-latest
    needs: [check-cache, build-android-packages]
    if: false
    # if: |
    #   always() &&
    #   (needs.build-packages.result == 'success' || needs.build-packages.result == 'skipped')
    
    steps:
      - uses: actions/checkout@v3

      - name: Restore m2-buildrepo
        uses: actions/cache@v3
        with:
          path: ./packages/build/m2-buildrepo
          key: packages-m2-${{ runner.os }}-sync-${{ needs.check-cache.outputs.packages-sha }}

      - name: Build benchmarks
        working-directory: benchmarks
        run: ./gradlew assemble

  test-android-packages:
    runs-on: ubuntu-latest
    needs: [check-cache, build-android-packages]
    if: |
      always() &&
      (needs.build-packages.result == 'success' || needs.build-packages.result == 'skipped')

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: "recursive"

      - name: Restore m2-buildrepo
        uses: actions/cache@v3
        with:
          path: ./packages/build/m2-buildrepo
          key: packages-m2-android-sync-${{ needs.check-cache.outputs.packages-sha }}

      - name: Run tests
        run: echo "Run tests for ${{ needs.check-cache.outputs.packages-sha }}"


  test-macos-packages:
    runs-on: macos-latest
    needs: [check-cache, build-macos-packages] # TODO Do we need to wait for all matrix builds?
    if: |
      always() &&
      (needs.build-packages.result == 'success' || needs.build-packages.result == 'skipped')

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: "recursive"

      - name: Restore m2-buildrepo
        uses: actions/cache@v3
        with:
          path: ./packages/build/m2-buildrepo
          key: packages-m2-macos-sync-${{ needs.check-cache.outputs.packages-sha }}

      - name: Run tests
        run: echo "Run tests for ${{ needs.check-cache.outputs.packages-sha }}"



